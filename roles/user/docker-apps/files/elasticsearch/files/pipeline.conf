# List of existing input plugins:
# https://www.elastic.co/guide/en/logstash/current/input-plugins.html

input {
  # file {
  #   # Kept as an example: It is possible to ingest files directly on the host of the logstash container
  #   # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
  #   mode => "tail"
  #   path => "/usr/share/logstash/ingest_data/*"
  # }

  http {
    port => "${LOGSTASH_HTTP_INPUT_PORT}"
    user => "${LOGGER_USER}"
    password => "${LOGGER_PASSWORD}"

    codec => json {
        # https://www.elastic.co/guide/en/logstash/current/plugins-codecs-json.html#plugins-codecs-json-target
        target => "[document]"
    }

    # Empty additional_codecs is needed for the http plugin to take into account
    # the `target` setting of the json codec, see this issue
    # https://github.com/logstash-plugins/logstash-codec-json/issues/40
    additional_codecs => {}
  }

  # beats {
  #   port => 5044
  # }
}

filter {
    mutate {
        # Remove the field automatically added by the json codec for the http plugin
        remove_field => [ "[event][original]" ]
    }
}

output {
    stdout {
        # Write on container output (TODO Check if these logs are kept and remove if it takes space on the host)
        codec => rubydebug
    }

    if [url][path] == "/api.statox.fr/_doc" {
        elasticsearch {
            hosts=> "${ELASTIC_HOSTS}"
            user=> "${ELASTIC_USER}"
            password=> "${ELASTIC_PASSWORD}"
            cacert=> "/usr/share/logstash/certs/ca/ca.crt"

            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "api-statox"
        }
    } else {
        elasticsearch {
            hosts=> "${ELASTIC_HOSTS}"
            user=> "${ELASTIC_USER}"
            password=> "${ELASTIC_PASSWORD}"
            cacert=> "/usr/share/logstash/certs/ca/ca.crt"

            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "others"
        }
    }
}
