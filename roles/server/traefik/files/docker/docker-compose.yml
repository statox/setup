networks:
  reverse-proxy:
    name: reverse-proxy
    driver: bridge

services:
  reverse-proxy:
    image: traefik:v3.2
    container_name: reverse-proxy
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # - "--log.level=DEBUG"
      - "--api.dashboard=true" # The dashboard is exposed with traefik itself, see labels
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      # Keep insecureSkipVerify because some containers (like es01) expect
      # https but use a self signed certificate
      - "--serversTransport.insecureSkipVerify=true"
      # Not using a certificatesresolvers to generate certificates because Cloudflare
      # doesn the SSL termination. And if we use tls=true in the containers labels
      # traefik will have a self signed certificate which is good enough as we'll have
      # Client     ->             SSL               -> Cloudflare certicate
      # Cloudflare ->             SSL               -> Traefik self signed
      # Traefik    -> No SSL but internal traffic   -> Container
      #               Excepted in some cases like
      #               for es01 where we use https
    ports:
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - reverse-proxy
    labels:
      # Use traefik to expose its own dashboard with a basic auth
      - "traefik.enable=true"
      - "traefik.http.routers.traefik_https.rule=Host(`panda-traefik.statox.fr`)"
      - "traefik.http.routers.traefik_https.entrypoints=websecure"
      - "traefik.http.routers.traefik_https.tls=true"
      - "traefik.http.routers.traefik_https.service=api@internal"
      - "traefik.http.routers.traefik_https.middlewares=traefik-basic-auth"
      - "traefik.http.middlewares.traefik-basic-auth.basicauth.users=${PANDA_TRAEFIK_ACCESS}"
