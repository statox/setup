# https://www.elastic.co/blog/getting-started-with-the-elastic-stack-and-docker-compose

networks:
  default:
    name: elastic
    external: false

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local
  metricbeatdata01:
    driver: local

configs:
  metricbeat.yml:
    file: ./elasticsearch/metricbeat.yml

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      # TODO: I might want to configure the ELK keystore in the setup container to store S3 snapshots repo secrets
      # if so mounting a single file could work like this:
      # - ${PWD}/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  # TODO The S3 snapshots repository is configured "semi manually", automate that
  # - The build process adds the AWS access key and secret key to the key store
  # - We still need to configure the repository and the policy from Kibana
  es01:
    depends_on:
      setup:
        condition: service_healthy
    container_name: es01
    restart: unless-stopped
    build:
      dockerfile: ./elasticsearch/builder/es/Dockerfile
      args:
        - STACK_VERSION=${STACK_VERSION}
        - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
        - AWS_SECRET_KEY=${AWS_SECRET_KEY}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    expose: # The port is exposed to the other containers using the "elastic" network but not to the host
      - 9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - path.repo=/usr/share/elasticsearch/data/snapshots # Local filesystem snapshots (TODO: Move that to another volume)
      - xpack.ml.enabled=false
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT_ELK}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    container_name: kibana
    restart: unless-stopped
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    expose:
      - 5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - SERVER_PUBLICBASEURL=${KIBANA_HOST}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - XPACK_SECURITY_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
    mem_limit: ${MEM_LIMIT_KIBANA}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    container_name: logstash
    restart: unless-stopped
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
    expose:
      - 9600
      - ${LOGSTASH_HTTP_INPUT_PORT}
    # Using root user because the "certs" volume is owned by root and I didn't find a way to change it
    # but there is a startup warning saying that running as root will be prevented in future versions
    user: root
    volumes:
      - logstashdata01:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      - "./elasticsearch/pipeline.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - LOGSTASH_HTTP_INPUT_PORT=${LOGSTASH_HTTP_INPUT_PORT}
      - LOGGER_USER=${LOGGER_USER}
      - LOGGER_PASSWORD=${LOGGER_PASSWORD}
    mem_limit: ${MEM_LIMIT_LOGSTASH}
    healthcheck:
      # test: bin/logstash -t # This fails because it seems the env variable are not populated,
      # using the curl check instead but should try to fix
      test: ["CMD-SHELL", "curl -s http://localhost:9600 | grep -q 'green'"]
      interval: 30s
      timeout: 20s
      retries: 10

  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    container_name: metricbeat
    restart: unless-stopped
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    # --strict.perms=false is needed because I can't manage to change the
    # permissions of the metricbeat.yml config file
    # Using a `configs` https://docs.docker.com/compose/compose-file/08-configs/
    # should allow me to do that but the `mode` and `uid` don't change when I set them
    command: -environment container --strict.perms=false
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    configs:
      - source: metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
    mem_limit: ${MEM_LIMIT_BEATS}
    healthcheck:
      test: metricbeat --strict.perms=false test config
      interval: 30s
      timeout: 15s
      retries: 5
