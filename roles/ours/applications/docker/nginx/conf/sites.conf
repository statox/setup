server {
    listen 80;
    listen [::]:80;

    server_name ours.statox.fr;

    location / {
        # Redirect http to https
        return 301 https://ours.statox.fr$request_uri;
    }
}

server {
    listen 80;
    listen [::]:80;

    server_name kibana2.statox.fr;

    location / {
        # Redirect http to https
        return 301 https://kibana2.statox.fr$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ours.statox.fr;

    # Self signed certificates generated in the Dockerfile
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    location / {}

    location /films {
        alias /www/data;
        autoindex on;
        auth_basic           "Authentication required";
        auth_basic_user_file /etc/nginx/conf.d/htpasswd;
        # Avoid buffering the files (which can be large) to disk
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name kibana2.statox.fr;

    # Self signed certificates generated in the Dockerfile
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    location / {
        proxy_pass http://kibana:5601;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 443 ssl;
    server_name logs2.statox.fr;

    # Self signed certificates generated in the Dockerfile
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    location / {
        # Should use LOGSTASH_HTTP_INPUT_PORT from docker-compose.yml instead of hardcoding 8888
        proxy_pass http://logstash:8888;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Ideally this should not be exposed to the internet, we should have
# a server-to-server VPN like tailscale to expose ELK to the heroku
# deploiment of the API
server {
    listen 443 ssl;
    server_name elk2.statox.fr;

    # Self signed certificates generated in the Dockerfile
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    location / {
        proxy_pass https://es01:9200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
